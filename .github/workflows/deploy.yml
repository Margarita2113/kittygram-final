   name: CI/CD Workflow

   on:
     push:
       branches:
         - main

   jobs:
     tests:
       name: Check PEP8
       runs-on: ubuntu-latest
       strategy:
         matrix:
           python-version: ["3.8", "3.9", "3.10"]
       steps:
         - name: Checkout code
           uses: actions/checkout@v3
         
         - name: Set up Python
           uses: actions/setup-python@v4
           with:
             python-version: ${{ matrix.python-version }}

         - name: Install flake8
           run: |
             pip install flake8

         - name: Test with flake8
           run: |
             flake8 --ignore=E123,E301,E302,E501,W291,W292,W293,F401 .

     build_and_push_to_docker_hub:
       runs-on: ubuntu-latest
       needs: tests
       steps:
         - name: Checkout code
           uses: actions/checkout@v3
         
         - name: Login to Docker Hub
           uses: docker/login-action@v2
           with:
             username: ${{ secrets.DOCKER_USERNAME }}
             password: ${{ secrets.DOCKER_PASSWORD }}

         - name: Build backend image
           run: |
             docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest backend
             docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

         - name: Build frontend image
           run: |
             docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest frontend
             docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

         - name: Build and push gateway image
           run: |
             docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest nginx
             docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

     deploy:
       runs-on: ubuntu-latest
       needs: build_and_push_to_docker_hub
       steps:
         - name: Checkout code
           uses: actions/checkout@v3
         
         - name: Copy docker-compose.production.yml via ssh
           uses: appleboy/scp-action@master
           with:
             host: ${{ secrets.HOST }}
             username: ${{ secrets.USER }}
             key: ${{ secrets.SSH_KEY }}
             passphrase: ${{ secrets.PASS_PHRASE }}
             source: "docker-compose.production.yml"
             target: "kittygram"
         - name: Copy create .env via ssh
           uses: appleboy/ssh-action@master
           with:
             host: ${{ secrets.HOST }}
             username: ${{ secrets.USER }}
             key: ${{ secrets.SSH_KEY }}
             passphrase: ${{ secrets.PASS_PHRASE }}
             script: |
               cd kittygram
               echo "POSTGRES_DB="${{ secrets.POSTGRES_DB }} > .env
               echo "POSTGRES_USER="${{ secrets.POSTGRES_USER }} >> .env
               echo "POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }} >> .env
               echo "POSTGRES_HOST="${{ secrets.DB_HOST }} >> .env
               echo "POSTGRES_PORT="${{ secrets.DB_PORT }} >> .env
               echo "DEBUG="${{ secrets.DEBUG }} >> .env
               echo "ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }} >> .env
               echo "SECRET_KEY="${{ secrets.SECRET_KEY }} >> .env
         - name: Deploy on server
           uses: appleboy/ssh-action@master
           with:
             host: ${{ secrets.HOST }}
             username: ${{ secrets.USER }}
             key: ${{ secrets.SSH_KEY }}
             passphrase: ${{ secrets.PASS_PHRASE }}
             script: |
               cd kittygram
               sudo docker compose -f docker-compose.production.yml pull
               sudo docker compose -f docker-compose.production.yml down
               sudo docker compose -f docker-compose.production.yml up -d
               sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
               sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
     auto_tests:
       name: Run Auto Tests
       runs-on: ubuntu-latest
       needs: deploy
       steps:
         - name: Checkout code
           uses: actions/checkout@v3

         - name: Set up Python
           uses: actions/setup-python@v4
           with:
             python-version: '3.10'

         - name: Install dependencies
           run: |
             pip install pytest pyyaml requests

         - name: Run backend tests
           run: |
             pytest
     notify_in_telegram:
       name: Notify in Telegram
       runs-on: ubuntu-latest
       needs: auto_tests
       steps:
         - name: Send Telegram Notification
           uses: appleboy/telegram-action@master
           with:
             to: ${{ secrets.TELEGRAM_CHAT_ID }}
             token: ${{ secrets.TELEGRAM_TOKEN }}
             message: "Kitty gram successfully deployed! Actor: ${{ github.actor }} Message: ${{ github.event.commits[0].message }} Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }} "
